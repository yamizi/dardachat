private function zoomRotate_AroundCenter(ob:Sprite,center:Point,angleDegrees:int,scale:Number):void{
			var m:Matrix=ob.transform.matrix;
			m.tx -= center.x;
			m.ty -= center.y;
			m.scale(scale, scale);
			m.rotate (angleDegrees*(Math.PI/180));
			m.tx += center.x;
			m.ty += center.y;
			ob.transform.matrix = m;
			//spin(ob,center,angleDegrees);
		}
		
		private function spin(obj:Sprite, pt:Point, angle:Number):void{
			var nAngle:Number = Math.atan2(obj.y-pt.y, obj.x-pt.x)+angle*Math.PI/180;
			var dist:int = Math.sqrt(Math.pow(obj.x-pt.x, 2)+Math.pow(obj.y-pt.y, 2));
			obj.rotation += angle;
			obj.x = pt.x+Math.cos(nAngle)*dist;
			obj.y = pt.y+Math.sin(nAngle)*dist;
		}





public function playAnimation():void{
			trace("animation");
			var nextTarget:Element;
			
			if(_zoomTarget){
				var numElement:uint = _zoomTarget.parent.numChildren
				var index:uint = (_zoomTarget.parent.getChildIndex(_zoomTarget)+1)%(numElement)
				nextTarget = _zoomTarget.parent.getChildAt(index) as Element
				//	trace("target: "+nextTarget+_zoomTarget)
				trace("\nnum element "+numElement+" index zoom" +_zoomTarget.parent.getChildIndex(_zoomTarget)+" "+index);
				trace("même "+(nextTarget==_zoomTarget));
			}
			else if(getWorkspace().getContainer().numChildren){
				nextTarget = getWorkspace().getContainer().getChildAt(0) as Element
				trace("start" +	nextTarget)
			}
			
			
			if(nextTarget){
				var num:uint = nextTarget.parent.numChildren
				while(nextTarget && nextTarget.visible==false && nextTarget.enableKeyframe){
					var tempElement:Element = nextTarget.parent.getChildAt((nextTarget.parent.getChildIndex(nextTarget)+1)%num) as Element
					if(tempElement==nextTarget){
						nextTarget = null
					}
					else{
						nextTarget = tempElement
					}
				}
				//var finalWidth:Number = nextTarget.width*Math.cos(nextTarget.rotation/180*Math.PI)+nextTarget.height*Math.sin(nextTarget.rotation/180*Math.PI)
				//var finalHeight:Number = -nextTarget.width*Math.sin(nextTarget.rotation/180*Math.PI)+nextTarget.height*Math.cos(nextTarget.rotation/180*Math.PI)
				var finalWidth:Number = nextTarget.getRealSize().width
				var finalHeight:Number = nextTarget.getRealSize().height
				var amount:Number = Math.min(getWorkspacePanel().width/Math.abs(finalWidth),(getWorkspacePanel().height-20)/Math.abs(finalHeight))		
				zoomAt(amount,nextTarget)
				
			}
			
		}






		
package ui
{
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.events.TextEvent;
	
	import org.aswing.ASColor;
	import org.aswing.AsWingManager;
	import org.aswing.BorderLayout;
	import org.aswing.CenterLayout;
	import org.aswing.Container;
	import org.aswing.EmptyLayout;
	import org.aswing.FlowLayout;
	import org.aswing.JButton;
	import org.aswing.JFrame;
	import org.aswing.JLabel;
	import org.aswing.JPanel;
	import org.aswing.JSeparator;
	import org.aswing.JSlider;
	import org.aswing.JSpacer;
	import org.aswing.JStepper;
	import org.aswing.JTextField;
	import org.aswing.SoftBoxLayout;
	import org.aswing.border.TitledBorder;
	import org.aswing.colorchooser.JColorSwatches;
	import org.aswing.event.ColorChooserEvent;
	import org.aswing.ext.Form;
	import org.aswing.ext.FormRow;
	import org.aswing.geom.IntDimension;
	import org.aswing.geom.IntPoint;
	import ui.buttons.ColorButton;
	
	public class PropertyPanel extends JFrame
	{
		
		private var _fillColor:ColorButton;
		private var _lineColor:ColorButton;
		private var _lineThick:JSlider;
		private var _rect:Vector.<JStepper>;
		private var _borderThick:uint = 0;
		
		//public var props:Object;
		
		public function PropertyPanel()
		{
			super(null, "Propriétés");
			
			setSize(new IntDimension( 275, 660 ) );
			setLocation(new IntPoint(1025,0));
			//setClosable(false);
			setResizable(false)
			getContentPane().setLayout(new EmptyLayout());			
			this.setMideground(new ASColor(0xF2F2F2))
			
		}
		
		public function setProperties(obj:Object):void{
			
			if(obj==null){
				_rect = null;
				_lineThick = null;
				this.getContentPane().removeAll();
			}
			else{
				sizeWindow(obj.posx,obj.posy,obj.w,obj.h);
				if(obj.type =="shape"||obj.type =="triangle"||obj.type =="box"||obj.type =="circle"){
					shapeWindow(obj.lineThick,obj.lineColor,obj.lineAlpha,obj.fillColor,obj.fillAlpha);
				}
				else if(obj.type =="text"){
					textWindow(
				}
				else{
					if(_lineThick){
					var mc:Container= _lineThick.getParent();
					_lineThick.removeEventListener(MouseEvent.MOUSE_UP,onUpdate_Shape);
					_lineThick = null;
					mc.removeAll();
					mc = null;
					this.getContentPane().remove(mc);
					}
				}
			}
			
		}
		
		private function buildRectangle(obj:Object):void{
			
		shapeWindow(obj.lineThick,obj.lineColor,obj.lineAlpha,obj.fillColor,obj.fillAlpha);
			
		}
		
		public function shapeWindow(lineThick:uint=1,lineColor:uint=0,lineAlpha:uint=100,fillColor:uint=1,fillAlpha:uint=100):void{
			_borderThick= lineThick
				
			if(_lineThick){
				_lineThick.setValue(lineThick);
				_lineColor.setColor(lineColor,lineAlpha,false);
				_fillColor.setColor(fillColor,fillAlpha,false);
			}
			else{
				var form:Form = new Form();
				form.setLocation(new IntPoint(5,200));
				form.setSize(new IntDimension(245,250));
				this.getContentPane().append(form,BorderLayout.CENTER);
				form.setVGap(10)
								
				_lineThick = new JSlider();
				_lineThick.setMinimum(0);
				_lineThick.setMaximum(10);
				_lineThick.setValue(lineThick);
				_lineThick.setShowValueTip(true);
				_lineThick.setPaintTicks(true);
				_lineThick.setMajorTickSpacing(1);
				_lineThick.setSnapToTicks(true);
				
				form.appendAll(new JLabel("Epaisseur du trait: "),_lineThick,_lineThick);
							
				var lineForm:FormRow = new FormRow();
				form.append(lineForm);
				_lineColor = new ColorButton("Bordure/Trait",this,lineColor,lineAlpha,onUpdate_Shape,"lineC")
				_fillColor = new ColorButton("Remplissage",this,fillColor,fillAlpha,onUpdate_Shape,"fillC")
				
				
				lineForm.appendAll(_lineColor,_fillColor)
				lineForm.setColumnChildrenIndecis("0,1");

				form.append(new JSeparator());
				
				_lineThick.addEventListener(MouseEvent.MOUSE_UP,onUpdate_Shape);
			}
			
		}	
		
		public function textWindow(fill:Object,border:Boolean,txt:String):void{
			
		}
			
			
		public function sizeWindow(posx:Number,posy:Number,w:Number,h:Number):void{
			if(_rect){
				for(i=0;i<4;i++){
					_rect[i].removeActionListener(onUpdate_Size);					
				}
				if(posx){
					_rect[0].setValue(int(posx));	
				}
				if(posy){
					_rect[1].setValue(int(posy));
				}
				if(w){
					_rect[2].setValue(int(w)-_borderThick*2);
				}
				if(h){
					_rect[3].setValue(int(h)-_borderThick*2);	
				}
			
				
				
				for(i=0;i<4;i++){
					_rect[i].addActionListener(onUpdate_Size);					
				}
			}
			else{
				var form:Form = new Form();
				form.setLocation(new IntPoint(5,10));
				form.setSize(new IntDimension(245,250));
				this.getContentPane().append(form,BorderLayout.CENTER);
				form.setVGap(10)
				_rect = new Vector.<JStepper>(4,true);
				_rect[0] = new JStepper();
				
				
				_rect[1] = new JStepper();
				
				_rect[2] = new JStepper();
				_rect[3] = new JStepper();
				
				for(var i:uint=0;i<4;i++){
					
					_rect[i].setMaximum(2000);
					
				}
				
				_rect[0].setValue(posx);
				_rect[1].setValue(posy);
				_rect[2].setValue(w);
				_rect[3].setValue(h);
				
				for(i=0;i<4;i++){
					_rect[i].addActionListener(onUpdate_Size);					
				}
				
				
				var lineForm1:FormRow = new FormRow();
				var lineForm2:FormRow = new FormRow();
				var lineForm3:FormRow = new FormRow();
				var lineForm4:FormRow = new FormRow();
				
				lineForm1.setColumnChildren([new JLabel("x:"),_rect[0]]);
				lineForm2.setColumnChildren([new JLabel("y:"),_rect[1]]);
				lineForm3.setColumnChildren([new JLabel("largeur:"),_rect[2]]);
				lineForm4.setColumnChildren([new JLabel("hauteur:"),_rect[3]]);
				
				var lineForm5:FormRow = new FormRow();
				var deleteButton:JButton = new JButton("Supprimer");
				deleteButton.addActionListener(deleteElement);
				var undoButton:JButton = new JButton("Undo")
				undoButton.addActionListener(undo);
				var redoButton:JButton = new JButton("Redo")
				redoButton.addActionListener(redo);
				lineForm5.setColumnChildren([deleteButton,undoButton,redoButton]);
				
				form.appendAll(lineForm1,lineForm2,lineForm3,lineForm4,new JSeparator(),lineForm5)
			}
			
		}
		
		private function undo(evt:Event):void{
			var main:Prezi = AsWingManager.getRoot() as Prezi;
			main.historyManager.undo();
		}
		
		private function redo(evt:Event):void{
			var main:Prezi = AsWingManager.getRoot() as Prezi;
			main.historyManager.redo();
		}
		
		private function deleteElement(evt:Event):void{
			var main:Prezi = AsWingManager.getRoot() as Prezi;
			if(main.selection){
				main.selection.hide();
			}
		}
	
		private function onUpdate_Size(evt:Event):void{
			var main:Prezi = AsWingManager.getRoot() as Prezi;
			trace("selection "+main.selection)
			if(main.selection){
				main.selection.setProperties({w:_rect[2].getValue(),h:_rect[3].getValue(),posx:_rect[0].getValue(),posy:_rect[1].getValue()});
			}
		}
		
		public function onUpdate_Shape(evt:Event=null,params:Array=null):void{
			
			var main:Prezi = AsWingManager.getRoot() as Prezi;
			trace("update")
			if(main.selection){
				var obj:Object = new Object();
				
				if(evt && evt.currentTarget ==_lineThick){
					obj.lineThick = _lineThick.getValue();
				}
				
				else if(params && params[0] =="fillC"){
					obj.fillColor = _fillColor.getColor().getRGB()
					obj.fillAlpha =_fillColor.getColor().getAlpha()*100;
				}
				
				else if(params && params[0] =="lineC"){
					obj.lineColor = _lineColor.getColor().getRGB();
					obj.lineAlpha =_lineColor.getColor().getAlpha()*100;
				}
				
				trace("thick "+_lineThick.getValue())
				main.selection.setProperties(obj)
				trace("thick "+_lineThick.getValue())
				
			}
		}
	}
}

//---------------------------------------------- Picture Container		

package Components
{
	import api.VimeoPlayer;
	
	import flash.display.Loader;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.ProgressEvent;
	import flash.net.URLRequest;
	import flash.system.Security;
	
	import logic.ServerFunctions;
	
	import org.aswing.geom.IntDimension;
	
	public class PictureContainer extends Sprite
	{
		protected var _src:String
		protected var _player:Object;
		protected var _loader:Loader = new Loader();
		protected var _type:String="";
		[Embed(source = "/assets/ui/loader.swf")]
		protected static const LOADER_ICON:Class;
		protected var _icon:Sprite = new LOADER_ICON();
		protected var _preview:Boolean
		
		public var finalDimension:IntDimension;
		
		
		public function PictureContainer(w:uint,h:uint,preview:Boolean = false)
		{
			super();
			_preview = preview
			drawEnveloppe(w,h)	
			_loader = new Loader();
			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE,onComplete);
			_loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,onProgress);
			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,onIO);
			addChild(_icon);
			_icon.visible = false
			//Security.loadPolicyFile("vimeo.com/moogaloop/crossdomain.xml");
		}
		
		public function unload():void{
			_loader.unload();
			_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE,onComplete);
			_loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS,onProgress);
			_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR,onIO);
			this._src = "";
			
		}
		
		public function loadUrl(path:String,w:uint=320,h:uint = 240):void{
			_type = "local";
			_src = path;
			if(_src.indexOf("http://localhost")==-1){
				_loader.load(new URLRequest(ServerFunctions.getFileScript()+"?src="+path));	
			}
			else{
				_loader.load(new URLRequest(path));
			}
			trace("load "+path);
			_icon.visible = true;
		}
		
		protected function onComplete(evt:Event):void{
			
			addChildAt(_loader,0)
			_icon.visible = false;
			graphics.clear();
			
			if(_preview){
				
			}
			
			else{
				
			}
			
			/*
			if(parent.parent is Picture){
				graphics.clear();
				
				
				if(finalDimension){
						drawEnveloppe(finalDimension.width,finalDimension.height);
				}
				trace("loader "+_loader.width)
		
				trace("loader "+_loader.width)
				trace("this "+width)
			}

			else{
				
				if(_loader.content.width>=_loader.content.height){
					_loader.content.height = Math.min(_loader.content.width,width)/_loader.content.width*_loader.content.height;
					_loader.content.width = Math.min(_loader.content.width,width)
				}
				else{
					_loader.content.width = Math.min(_loader.content.height,height)/_loader.content.height*_loader.content.width;
					_loader.content.height = Math.min(_loader.content.height,height)
				}
				
				
			}*/
			
			/*
			_imageLoader = addChild(new Loader()) as Loader;
			...
			var bitmap = _imageLoader.content as Bitmap;
			bitmap.scaleX = bitmap.scaleY = scaleFactor;
			bitmap.smoothing = true;
			*/
			
			/*
			var scale:Number = 0.32;
			var matrix:Matrix = new Matrix();
			matrix.scale(scale, scale);
			
			var smallBMD:BitmapData = new BitmapData(bigBMD.width * scale, bigBMD.height * scale, true, 0x000000);
			smallBMD.draw(bigBMD, matrix, null, null, null, true);
			
			var bitmap:Bitmap = new Bitmap(smallBMD, PixelSnapping.NEVER, true);
			*/
		}
		
		private function onProgress(evt:ProgressEvent):void{
			
		}
		
		private function onIO(evt:IOErrorEvent):void{
			
		}
		public function get src():String{
			return _src
		}
		
		public function drawEnveloppe(w:Number,h:Number):void{
			graphics.clear();
			trace("set size picture")
			if(_src){
			
				
				//graphics.lineStyle(1,0xff0000,1,true);
				//graphics.drawRoundRect(0,0,w,h,10,10);
			}
			
			else{
				graphics.beginFill(0xFFFFFF);
				graphics.lineStyle(1,0x999999,1,true);
				graphics.drawRoundRect(0,0,w,h,10,10);
				_icon.x = (w-_icon.width)/2
				_icon.y = (h-_icon.height)/2;
			}
			trace("laod img "+w+"--"+h);
			_loader.width = w;
			_loader.height = h;
		}
	}
}