/*
Copyright aswing.org, see the LICENCE.txt.
*/

package  org.aswing.ppzhao{
	
	import flash.text.TextField;
	import flash.text.TextFieldAutoSize;
	
	import org.aswing.*;
	import org.aswing.event.ToolTipEvent;
	import org.aswing.geom.IntDimension;
	import org.aswing.plaf.BaseComponentUI;
	
	/**
	 * @private
	 */
	public class BasicToolTipUI extends BaseComponentUI{
		
		protected var tooltip:JToolTip;
		protected var label:AssetPane;
		private var textTool:TextField=new TextField();
		public function BasicToolTipUI() {
			super(); 
			textTool.autoSize=TextFieldAutoSize.LEFT 
		}
		
		override public function installUI(c:Component):void{
			tooltip = JToolTip(c);
			installDefaults();
			initallComponents();
			installListeners();
		}
		
		protected function getPropertyPrefix():String {
			return "ToolTip.";
		}
		
		protected function installDefaults():void{
			var pp:String = getPropertyPrefix();
			LookAndFeel.installColorsAndFont(tooltip, pp);
			LookAndFeel.installBorderAndBFDecorators(tooltip, pp);
			LookAndFeel.installBasicProperties(tooltip, pp);
			var filters:Array = getInstance(getPropertyPrefix()+"filters") as Array;
			tooltip.filters = filters;
		}
		
		protected function initallComponents():void{
			var b:JToolTip = tooltip;
			b.setLayout(new BorderLayout()); 
			 textTool.htmlText=b.getTipText()+"";
			 
			 label = new AssetPane(textTool);
			label.setFont(null); //make it to use parent(JToolTip) font
			label.setForeground(null); //make it to user parent(JToolTip) foreground
			label.setUIElement(true);
			label.setPreferredSize(new IntDimension(textTool.width+5,textTool.height+5));
			b.append(label, BorderLayout.CENTER); 
		}
		
		protected function installListeners():void{
			tooltip.addEventListener(ToolTipEvent.TIP_TEXT_CHANGED, __tipTextChanged);
		}
		
		private function __tipTextChanged(e:ToolTipEvent):void{
			 textTool.htmlText=tooltip.getTipText()+""
			 label.setPreferredSize(new IntDimension(textTool.width+5,textTool.height+5));
			//label.setText(tooltip.getTipText());
		}
		
		override public function uninstallUI(c:Component):void{
			uninstallDefaults();
			uninstallListeners();
			uninstallComponents();
		}
		
		protected function uninstallDefaults():void{
			LookAndFeel.uninstallBorderAndBFDecorators(tooltip);
			tooltip.filters = [];
		}
		
		protected function uninstallComponents():void{
			tooltip.remove(label);
			label = null;
		}    
		
		protected function uninstallListeners():void{
			tooltip.removeEventListener(ToolTipEvent.TIP_TEXT_CHANGED, __tipTextChanged);
		}
		
		
	}
	
}
 
